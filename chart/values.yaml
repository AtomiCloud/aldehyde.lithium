serviceTree: &serviceTree
  platform: &platform aldehyde
  service: &service lithium
  layer: &layer '2'

tags: &tags
  atomi.cloud/platform: *platform
  atomi.cloud/service: *service
  atomi.cloud/layer: *layer

# -- YAML Anchor for PodSecurityContext
podSecurityContext: &podSecurityContext
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  runAsNonRoot: true

# -- YAML Anchor for SecurityContext
securityContext: &securityContext
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 3000
  capabilities:
    drop:
      - ALL
#
serviceAccount:
  create: true
  automount: true


bromine:
  serviceTree:
    <<: *serviceTree
  annotations:
    argocd.argoproj.io/sync-wave: '1'
  # -- Store name to create
  storeName: *service
  # -- Secret of Secrets reference
  rootSecret:
    name: *service
    # -- Infisical Token Reference
    ref:
      # -- Client ID
      clientId: ALDEHYDE_LITHIUM_CLIENT_ID
      # -- Client Secret
      clientSecret: ALDEHYDE_LITHIUM_CLIENT_SECRET

  target: &target lithium



# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/logto-io/logto
  pullPolicy: IfNotPresent
  tag: ''

imagePullSecrets: [ ]
nameOverride: ''
fullnameOverride: ''

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  type: ClusterIP
  ports:
    http: 80
    admin: 3002
  containerPorts:
    http: 3001
    admin: 3002

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: traefik
  hosts:
    - host: # TODO: add host
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: [ ]

# Optional separate ingress for the admin portal
adminIngress:
  enabled: false
  className: traefik
  hosts:
    - host: # TODO: add admin host
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: [ ]

resources:
  limits:
    cpu: 1
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 64Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /api/status
    port: http
readinessProbe:
  httpGet:
    path: /api/status
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
replicaCount: 1
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

## No additional volumes or mounts required

nodeSelector: { }

tolerations: [ ]

affinity: { }

maincache:
  podSecurityContext: *podSecurityContext
  securityContext: *securityContext

  storage:
    enabled: false

  resources:
    requests:
      memory: 256Mi
      cpu: 100m
    limits:
      memory: 512Mi
      cpu: 250m

app:
  # Public endpoints
  endpoint: ""        # e.g., https://auth.example.com
  adminEndpoint: ""   # e.g., https://admin-auth.example.com
  trustProxyHeader: 1

secrets:
  create: false
  # If empty, uses "<release>-aldehyde-lithium-app"
  nameOverride: *target
  data:
    # Required
    DB_URL: '' # e.g., postgres://user:pass@host:5432/logto

# OIDC key rotation (DB-managed keys)
oidc:
  rotate:
    enabled: false
    schedule: "0 0 * * *"
    backoffLimit: 0
    type: ec
    cookieKeys: false

# --- Persistence for connector data directory.
# For HA (multiple replicas), prefer RWX storage (EFS/NFS). For immutable single-replica demos, `emptyDir` is acceptable.
## No PVCs by default; connectors use emptyDir via initContainer.

# --- Argo CD Sync Waves to orchestrate ordering
syncWaves:
  configmap: "3"
  setupJob: "4"
  migrationJob: "5"
  deployment: "6"
  service: "6"
  ingress: "6"

# --- Pre-setup and migration Jobs (run before Deployment)
preSetup:
  enabled: true
  backoffLimit: 3

migrations:
  enabled: true
  backoffLimit: 3
